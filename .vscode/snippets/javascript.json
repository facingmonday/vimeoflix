{
    "Merrln Page": {
        "prefix": "mer_page",
        "body": [
          "import React, { Component } from 'react';",
          "import { connect } from 'react-redux';",
          "import { withRouter } from 'react-router-dom';",
          "import Header from '~/components/Header';",
          "import Navigation from '~/components/Navigation';",
          "import './${1:name}.less';",
          "import ${1:name}Container from '~/containers/${2:modelAllLowerCase}/${1:name}';",
          "",
          "class ${1:name} extends Component {",
          "    render() {",
          "        return (",
          "            <div className=\"container-fluid page-container\">",
          "                <div className=\"row page-row\">",
          "                    <div className=\"col-xs-12 col-sm-2 left-column\">",
          "                        <Navigation />",
          "                    </div>",
          "                    <div className=\"col-xs-12 col-sm-10 right-column\">",
          "                        <div className=\"row\">",
          "                            <Header />",
          "                        </div>",
          "                        <div className=\"row\">",
          "                            <${1:name}Container />",
          "                        </div>",
          "                    </div>",
          "                </div>",
          "            </div>",
          "        );",
          "    }",
          "}",
          "",
          "export default withRouter(${1:name});"
        ],
        "description": ""
    },



    "Merrln Container ": {
        "prefix": "mer_container",
        "body": [
          "import React, { Component } from 'react';",
          "import { connect } from 'react-redux';",
          "import * as Actions from '../../actions/${1:actionName}';",
          "import { withRouter } from 'react-router-dom';",
          "import ${2:componentName} from '../../components/${1:actionName}/${2:componentName}';",
          "",
          "const mapStateToProps = (state)=> {",
          "    return {",
          "    ",
          "    };",
          "};",
          "",
          "const mapDispatchToProps = (dispatch) => {",
          "    return {",
          "  }",
          "    ",
          "}",
          "",
          "export default withRouter(connect(mapStateToProps, mapDispatchToProps)(${2:componentName}));"
        ],
        "description": "Redux Container "
    },
    
    
    
    "Actions": {
        "prefix": "mer_action",
        "body": [
          "import axios from 'axios';",
          "import * as ActionTypes from '../actionTypes/${1:allLower}';",
          "",
          "export function fetch${2:upperFirst}sLoading(){",
          "  return {",
          "    type: ActionTypes.FETCH_${3:allUpper}S_LOADING",
          "  }",
          "}",
          "",
          "export function fetch${2:upperFirst}sSuccess(${1:allLower}s){",
          "  return {",
          "    type: ActionTypes.FETCH_${3:allUpper}S_SUCCESS,",
          "    payload: ${1:allLower}s",
          "  }",
          "}",
          "",
          "export function fetch${2:upperFirst}sFailure(error){",
          "  return {",
          "    type: ActionTypes.FETCH_${3:allUpper}S_SUCCESS,",
          "    payload: error",
          "  }",
          "}",
          "",
          "export function fetch${2:upperFirst}s() {",
          "  const request = axios({",
          "    method: 'get',",
          "    url: `/api/${1:allLower}s`,",
          "    headers: []",
          "  });",
          "  return {",
          "    type: ActionTypes.FETCH_${3:allUpper}S,",
          "    payload: request",
          "  };",
          "}",
          "",
          "export function fetch${2:upperFirst}Loading(){",
          "  return {",
          "    type: ActionTypes.FETCH_${3:allUpper}_LOADING",
          "  }",
          "}",
          "",
          "export function fetch${2:upperFirst}Success(active${2:upperFirst}){",
          "  return {",
          "    type: ActionTypes.FETCH_${3:allUpper}_SUCCESS,",
          "    payload: active${2:upperFirst}",
          "  }",
          "}",
          "",
          "export function fetch${2:upperFirst}Failure(error){",
          "  return {",
          "    type: ActionTypes.FETCH_${3:allUpper}_SUCCESS,",
          "    payload: error",
          "  }",
          "}",
          "",
          "export function fetch${2:upperFirst}(id) {",
          "  const request = axios({",
          "    method: 'get',",
          "    url: `/api/${1:allLower}s/${id}`,",
          "    headers: []",
          "  });",
          "  return {",
          "    type: ActionTypes.FETCH_${3:allUpper},",
          "    payload: request",
          "  };",
          "}",
          "",
          "export function resetActive${2:upperFirst}() {",
          "  return {",
          "    type: ActionTypes.RESET_ACTIVE_${3:allUpper}",
          "  }",
          "}",
          "",
          "export function create${2:upperFirst}(props){",
          "  const request = axios({",
          "    method: 'post',",
          "    data: props,",
          "    url: `/api/${1:allLower}s`",
          "    //headers: {",
          "    //  'Authorization': `Bearer ${tokenFromStorage}`",
          "    // }",
          "  });",
          "",
          "  return {",
          "    type: ActionTypes.CREATE_${3:allUpper},",
          "    payload: request",
          "  };",
          "}",
          "",
          "export function create${2:upperFirst}Success(new${2:upperFirst}){",
          "  return {",
          "    type: ActionTypes.CREATE_${3:allUpper},",
          "    payload: new${2:upperFirst}",
          "  }",
          "}",
          "",
          "export function create${2:upperFirst}Failure(error) {",
          "  return {",
          "    type: ActionTypes.CREATE_${3:allUpper}_FAILURE,",
          "    payload: error",
          "  }",
          "}",
          "",
          "export function resetNew${2:upperFirst}() {",
          "  return {",
          "    type: ActionTypes.RESET_NEW_${3:allUpper}",
          "  }",
          "}",
          "",
          "export function delete${2:upperFirst}(id){",
          "  const request = axios({",
          "    method: 'delete',",
          "    url: `/api/${1:allLower}/${id}`",
          "    // headers: {",
          "    //   'Authorization': `Bearer ${tokenFromStorage}`",
          "    // }",
          "  });",
          "  return {",
          "    type: ActionTypes.DELETE_${3:allUpper},",
          "    payload: request",
          "  };",
          "}",
          "",
          "export function delete${2:upperFirst}Success(deleted${2:upperFirst}){",
          "  return {",
          "    type: ActionTypes.DELETE_${3:allUpper}_SUCCESS,",
          "    payload: deleted${2:upperFirst}",
          "  }",
          "}",
          "",
          "export function delete${2:upperFirst}Failure(response){",
          "  return {",
          "    type: ActionTypes.DELETE_${3:allUpper}_FAILURE,",
          "    payload: response",
          "  }",
          "}",
          "",
          "export function resetDeleted${2:upperFirst}() {",
          "  return {",
          "    type: ActionTypes.RESET_DELETED_${3:allUpper}",
          "  }",
          "}"
        ],
        "description": "Actions"
      },
    
    
    
    
      "Action Types": {
        "prefix": "mer_actiontype",
        "body": [
          "export const FETCH_${1:allUpper}S = 'FETCH_${1:allUpper}S';",
          "export const FETCH_${1:allUpper}S_LOADING = 'FETCH_${1:allUpper}S_LOADING';",
          "export const FETCH_${1:allUpper}S_SUCCESS = 'FETCH_${1:allUpper}S_SUCCESS';",
          "export const FETCH_${1:allUpper}S_FAILURE = 'FETCH_${1:allUpper}S_FAILURE';",
          "export const RESET_${1:allUpper}S = 'RESET_${1:allUpper}S';",
          "export const FETCH_${1:allUpper} = 'FETCH_${1:allUpper}';",
          "export const FETCH_${1:allUpper}_LOADING = 'FETCH_${1:allUpper}_LOADING';",
          "export const FETCH_${1:allUpper}_SUCCESS = 'FETCH_${1:allUpper}_SUCCESS';",
          "export const FETCH_${1:allUpper}_FAILURE = 'FETCH_${1:allUpper}_FAILURE';",
          "export const RESET_ACTIVE_${1:allUpper} = 'RESET_ACTIVE_${1:allUpper}';",
          "export const CREATE_${1:allUpper} = 'CREATE_${1:allUpper}';",
          "export const CREATE_${1:allUpper}_SUCCESS = 'CREATE_${1:allUpper}_SUCCESS';",
          "export const CREATE_${1:allUpper}_FAILURE = 'CREATE_${1:allUpper}_FAILURE';",
          "export const RESET_NEW_${1:allUpper} = 'RESET_NEW_${1:allUpper}';",
          "export const DELETE_${1:allUpper} = 'DELETE_${1:allUpper}';",
          "export const DELETE_${1:allUpper}_SUCCESS = 'DELETE_${1:allUpper}_SUCCESS';",
          "export const DELETE_${1:allUpper}_FAILURE = 'DELETE_${1:allUpper}_FAILURE';",
          "export const RESET_DELETED_${1:allUpper} = 'RESET_DELETED_${1:allUpper}';"
        ],
        "description": "Action Types"
      },
    
    
    
    
    
    
    
    
      "Reducer": {
        "prefix": "mer_reducer",
        "body": [
          "import { ",
          "    FETCH_${1:allCaps}S, FETCH_${1:allCaps}S_SUCCESS, FETCH_${1:allCaps}S_FAILURE, FETCH_${1:allCaps}S_LOADING, RESET_${1:allCaps}S,",
          "    FETCH_${1:allCaps}, FETCH_${1:allCaps}_SUCCESS, FETCH_${1:allCaps}_FAILURE, FETCH_${1:allCaps}_LOADING, RESET_ACTIVE_${1:allCaps},",
          "    CREATE_${1:allCaps}, CREATE_${1:allCaps}_SUCCESS, CREATE_${1:allCaps}_FAILURE, RESET_NEW_${1:allCaps},",
          "    UPDATE_${1:allCaps}, UPDATE_${1:allCaps}_SUCCESS, UPDATE_${1:allCaps}_FAILURE,",
          "    DELETE_${1:allCaps}, DELETE_${1:allCaps}_SUCCESS, DELETE_${1:allCaps}_FAILURE, RESET_DELETED_${1:allCaps}",
          "  } from '../actionTypes/${2:allLower}';",
          "  ",
          "  const initialState = {",
          "      ${2:allLower}sList: {",
          "        ${2:allLower}s: [],",
          "        error: null,",
          "        loading: false",
          "      },",
          "      active${3:upperFirst}: {",
          "        ${2:allLower}:null,",
          "        error: null,",
          "        loading: false",
          "      },",
          "      new${3:upperFirst}: {",
          "        ${2:allLower}: null,",
          "        error: null,",
          "        loading: false",
          "      },",
          "      delete${3:upperFirst}: {",
          "        ${2:allLower}: null,",
          "        error: null,",
          "        loading: false",
          "      }",
          "  };",
          "  ",
          "  export default (state = initialState, action) => {",
          "      let error;",
          "      switch (action.type) {",
          "  ",
          "        case FETCH_${1:allCaps}S:// start fetching posts and set loading = true",
          "          return { ...state, ${2:allLower}sList: {${2:allLower}s:[], error: null, loading: true} }; ",
          "        case FETCH_${1:allCaps}S_LOADING:",
          "          return { ...state, ${2:allLower}sList: {${2:allLower}s:[], error: null, loading: true} }; ",
          "        case FETCH_${1:allCaps}S_SUCCESS:// return list of posts and make loading = false",
          "          return { ...state, ${2:allLower}sList: {${2:allLower}s: action.payload, error:null, loading: false} };",
          "        case FETCH_${1:allCaps}S_FAILURE:// return error and make loading = false",
          "          error = action.payload || {message: action.payload.message};",
          "          return { ...state, ${2:allLower}sList: {${2:allLower}s: [], error: error, loading: false} };",
          "        case RESET_${1:allCaps}S:// reset postList to initial state",
          "          return { ...state, ${2:allLower}sList: {${2:allLower}s: [], error:null, loading: false} };",
          "  ",
          "        case FETCH_${1:allCaps}:",
          "          return { ...state, active${3:upperFirst}:{...state.active${3:upperFirst}, loading: true}};",
          "        case FETCH_${1:allCaps}_LOADING:",
          "          return { ...state, active${3:upperFirst}:{...state.active${3:upperFirst}, loading: true}};",
          "        case FETCH_${1:allCaps}_SUCCESS:",
          "          return { ...state, active${3:upperFirst}: {${2:allLower}: action.payload, error:null, loading: false}};",
          "        case FETCH_${1:allCaps}_FAILURE:",
          "          error = action.payload || {message: action.payload.message};",
          "          return { ...state, active${3:upperFirst}: {${2:allLower}: null, error:error, loading:false}};",
          "        case RESET_ACTIVE_${1:allCaps}:",
          "          return { ...state, active${3:upperFirst}: {${2:allLower}: null, error:null, loading: false}};",
          "  ",
          "        case CREATE_${1:allCaps}:",
          "          return {...state, new${3:upperFirst}: { ...state.new${3:upperFirst}, loading: true}};",
          "        case CREATE_${1:allCaps}_SUCCESS:",
          "          return {...state, new${3:upperFirst}: { ${2:allLower}: action.payload, error:null, loading: false}}",
          "        case CREATE_${1:allCaps}_FAILURE:",
          "          error = action.payload || { message: action.payload.message};",
          "          return {...state, new${3:upperFirst}: { ${2:allLower}: null, error: error, loading: false}}",
          "        case RESET_NEW_${1:allCaps}:",
          "          return {...state,  new${3:upperFirst}:{${2:allLower}: null, error: null, loading: false}}",
          "  ",
          "        case UPDATE_${1:allCaps}:",
          "          return {...state, active${3:upperFirst}: { ...state.active${3:upperFirst}, loading: true}};",
          "        case UPDATE_${1:allCaps}_SUCCESS:",
          "          return {...state, active${3:upperFirst}: { ${2:allLower}: action.payload, error:null, loading: false}}",
          "        case UPDATE_${1:allCaps}_FAILURE:",
          "          error = action.payload || { message: action.payload.message};",
          "          return {...state, active${3:upperFirst}: { ${2:allLower}: null, error: error, loading: false}}",
          "        ",
          "  ",
          "        case DELETE_${1:allCaps}:",
          "          return { ...state, deletedPost: { ...state.deletedPost, loading: true}};",
          "        case DELETE_${1:allCaps}_SUCCESS:",
          "          return { ...state, deleted${3:upperFirst}: {${2:allLower}: action.payload, error: null, loading: false}};",
          "        case DELETE_${1:allCaps}_FAILURE:",
          "          error = action.payload || {message: action.payload.message};",
          "          return {...state, deleted${3:upperFirst}: {${2:allLower}:null, error:error, loading: false}}",
          "        case RESET_DELETED_${1:allCaps}:",
          "          return {...state,  deleted${3:upperFirst}:{${2:allLower}:null, error:null, loading: false}}",
          "        ",
          "        ",
          "        default:",
          "          return state;",
          "      }",
          "    }",
          "  ",
          "    "
        ],
        "description": "Reducer"
      },
    
    
    
    
    
      "server_index": {
        "prefix": "mer_server_index",
        "body": [
          "'use strict';",
          "",
          "var express = require('express');",
          "var controller = require('./${1:model}.controller');",
          "",
          "var router = express.Router();",
          "",
          "router.get('/', controller.index);",
          "router.get('/:id', controller.show);",
          "router.post('/', controller.create);",
          "",
          "router.put('/:id', controller.update);",
          "router.patch('/:id', controller.update);",
          "router.delete('/:id', controller.destroy);",
          "",
          "module.exports = router;"
        ],
        "description": "server_index"
      }
    
    
    
    
    
    }